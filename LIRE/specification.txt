application de gestion sportive (football)
REGARDER DANS DTO, CERTAINES INFIRMATIONS (ATTRIBUTS) DE DTO NE SONT PLUS VALIDES ICI

le projet est à realise en next js pour le frontned et le backend en sprngboot entierement
le backend est terlminé
actu nous travaillons sur le frontend

ON A 05 VUES: USER(simple), PLAYER, COACH, ADMIN, ORGANIZER
LES VUES DE PLAYER, COACH , ADMIN , ORAGNIZER DISPOSE DE LA MÊME VUE QUE USER.
LA VUE USER DOIT PERMETTRE A CELUI D AVOIR UN DASHBOARD


TABLEAU DE BORD
COMPETITIONS
EQUIPES
JOUEURS
MATCHS
MEDIATHEQUE
MON PROFIL 

Dans la section competitions
Il doit pouvoir s afficher  les informations de toutes les competions de la plateforme dans des cart Et avoir la possibilité d en selectionner une pour consulter davantage d information
nb: la possibilite de raffiner(tri, recherche) celles affiches par statu; upcoming, in progress, competed, cancelled, ou bien par nom de competition , par nom d organisateur ou par date de creation, date de debut,date de fin ou dans l intervalle de date
ou par category
public class CompetitionDTO {
    private Long id;
    private String name;
    private String description;
    private String category;
    private String type; // LEAGUE, TOURNAMENT, CUP
    private String status; // UPCOMING, IN_PROGRESS, COMPLETED, CANCELLED
    private LocalDate startDate;
    private LocalDate endDate;
    private String location;
    private Integer maxTeams;
    private Integer registeredTeams;
    private Long organizerId;
    private String organizerName;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}

Lorsqu il clique sur voir plus d informations sur une competition en particulier,
on doit pouvoir lui afficher :
	-voir la liste des matchs programmés de la competition selectionnée dans des carts
	-les informations publiques des organisateurs (leur profil)
	-le profil des equipes partipantes à une competition , dans leur presentation , dans des cart
	nb: la possibilite de raffiner(tri, recherche) celles affiches par category, par nom de coach, 

public class MatchDTO {
    private Long id;
    private String title;
    private Long homeTeamId;
    private String homeTeamName;
    private Long awayTeamId;
    private String awayTeamName;
    private Long competitionId;
    private String competitionName;
    private String competitionType;
    private LocalDateTime scheduledDateTime;
    private String status;
 
    private Integer homeTeamScore;
    private Integer awayTeamScore;
    private Boolean hasMatchSheet;
    private String matchSheetStatus;
    private String round;
    private String phase;
}

statu match :   SCHEDULED,  // Programmé
    IN_PROGRESS,    // En cours
    COMPLETED,  // Terminé
    POSTPONED,  // Reporté
    CANCELLED   //

remarque : pour chaque mathch , lorsqu il clique pour obtenir plus d informations on lui presente la feuille de match du match si celle ci est deja disponible(statut VALIDATED)
De meme donner la possibliite de trouver les match auquel participe une equipe en particulier,deux equipes en en particuliers qui devrait s affronter (par leurs noms), trouver  match dans l intervalle de deux dates
public class ConsolidatedMatchDTO {
    private Long id;
    private String title;
    private String description;
    private Long competitionId;
    private String competitionName;
    private LocalDateTime matchDateTime;
    private String location;
    private String status; (VALIDATED)
    
    // Score affiché quand le match est terminé
    private Integer homeScore;
    private Integer awayScore;
    
    // Feuilles de match par équipe
    private MatchSheetDTO homeTeamSheet;
    private MatchSheetDTO awayTeamSheet;
    
    // Informations sur les équipes (extraites des participants au match)
    private TeamInfoDTO homeTeam;
    private TeamInfoDTO awayTeam;
    
    // Dates de création et de mise à jour
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    
    @Data
    @Builder
    @AllArgsConstructor
    @NoArgsConstructor
    public static class TeamInfoDTO {
        private Long id;
        private String name;
        private String logo;
        private Long coachId;
        private String coachName;
    }
}

public class MatchSheetDTO {
    private Long id;
    private Long matchId;
    private String matchTitle;
    private Long teamId;
    private String teamName;
    private MatchRole teamRole; // HOME ou AWAY
    private Long competitionId;
    private String competitionName;
    private LocalDateTime matchDateTime;
    private String venue;
    private Integer teamScore;
    private Integer opponentScore;
    private String status; // DRAFT, SUBMITTED, VALIDATED, UNVALIDATED
    private List<PlayerParticipationDTO> playerParticipations;
    private String coachComments;
    private String organizerComments;
    private LocalDateTime submittedAt;
    private LocalDateTime validatedAt;
    private String strategy;
}

public class PlayerParticipationDTO {
    private Long id;
    private Long matchSheetId;
    private Long playerId;
    private String playerName;
    private Integer shirtNumber;
    private String playerStatus; // Enum PlayerStatus convertie en String
    private String position;
    private Integer goalsScored;
    private Integer yellowCards;
    private Integer redCards;
    private Integer minutesPlayed;
    private Integer substitutionInTime;
    private Integer substitutionOutTime;
    private String positionPlayed;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}
---
public class OrganizerDTO {
    private Long id;
    private String email;
    private String userName;
    private String firstName;
    private String lastName;
    private String phone;
    private String profilePicture;
    private String organization;
    private Integer activeCompetitionsCount;
}

public class TeamDTO {
    private Long id;
    private String name;
    private String description;
    private String logo;
    private String category; JUNIOR, SENIOR, VETERAN
    private Long coachId;
    private String coachName;
    private Integer playerCount;
    private Integer competitionCount;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}


-avoir la possibilite pour chaque equipe lorsqu on clique sur voir plus, de consulter le profil du coach et des joueurs(Playerdto+playerperformancedto) de l equipe, et le classement de l equipe

//information de classemebt d une equipe
public class StandingDTO {
    private Long id;
    private Long competitionId;
    private String competitionName;
    private Long teamId;
    private String teamName;
    private Integer position;
    private Integer matchesPlayed;
    private Integer wins;
    private Integer draws;
    private Integer losses;
    private Integer goalsFor;
    private Integer goalsAgainst;
    private Integer goalDifference;
    private Integer points;
    private String form; // Last 5 matches: W-L-D-W-W
}   

profil du coach
public class CoachDTO {
    private Long id;
    private String email;
    private String userName;
    private String firstName;
    private String lastName;
    private String phone;
    private String profilePicture;
    private String licenseNumber;
    private Integer yearsOfExperience;
    private Integer numberOfTeams;
}

-profil des joeurs
public class PlayerDTO {
    private Long id;
    private String email;
    private String userName;
    private String firstName;
    private String lastName;
    private String position;
    private String licenseNumber;
    private PlayerStatus status;
    private Long teamId;
    private String teamName;
}
public class PlayerPerformanceDTO {
    private Long id;
    private Long playerId;
    private String playerName;
    private Long competitionId;
    private String competitionName;
    
    // Common statistics
    private Integer totalMatches;
    private Integer totalMinutesPlayed;
    private Integer totalFouls;
    private Integer totalYellowCards;
    private Integer totalRedCards;
    
    // Offensive statistics
    private Integer totalGoals;
    private Integer totalAssists;
    private Integer totalShots;
    private Integer shotsOnTarget;
    private Integer penaltiesScored;
    private Integer penaltiesTaken;
    private Integer successfulDribbles;
    
    // Midfield statistics
    private Double passAccuracy;
    private Integer successfulPasses;
    private Integer ballsRecovered;
    private Integer successfulCrosses;
    
    // Defensive statistics
    private Integer interceptions;
    private Integer ballsLost;
    
    // Goalkeeper statistics
    private Integer savesMade;
    private Integer cleanSheets;
    private Integer penaltiesSaved;
    private Integer goalsConceded;
    private Double savePercentage;
    
    private Double rating;
    private String notes;

}



Dans la section Equipe,
-Il doit pouvoir s afficher  les informations de toutes les equipes  de la plateforme dans des cart Et avoir la possibilité d en selectionner une pour consulter davantage d information voir teamDTO et son classemnt (standigndto)
-avoir la possibilite pour chaque equipe, de consulter le profil du coach et des joueurs (VOIR COACHDTO ET PLAYERDTO + PlayerPerformanceDTO)

dans la section match
on lui affiche les infirlations de tous les matchs programmés, en plus de ce qui a deja ete decrit plus haut :
possibilite d afficher par statut 
  SCHEDULED,  // Programmé
    IN_PROGRESS,    // En cours
    COMPLETED,  // Terminé
    POSTPONED,  // Reporté
    CANCELLED   // Annulé

dans mediatheque 
afficher les differents medias de la plateforme,possibilite de rafiner celle affiche par nom d equipe, par type ou par competition 
public class MediaDTO {
    private Long id;
    private String title;
    private String url;
    private String description;
    private String mediaType; // VIDEO, IMAGE, DOCUMENT
    private Long uploaderId;
    private String uploaderName;
    private String uploaderRole;
    private Long competitionId;
    private String competitionName;
    private Long matchId;
    private String matchTitle;
    private Long teamId;
    private String teamName;
    private LocalDateTime uploadedAt;
    private Integer viewCount;
}

dans la section joueur, 
afficher de voir les profils des joueurs inscrits sur la plateforme dans des carts 
possibilite d affiner par nom d utilisateur, nom , prenom du joueur, par equipe du joueur, par competition, par position (GOAL, ATTACKS, DEFENSE, MIDDLE), par nom de titre de match 
possibilite de cliquer dessus pour affiche le profil du joeur bien entendu (voir playerdto+playerperformancedto)

pour les raffinage avoir la possibilite de tout reinitialiser 

POUR LA VUE PLAYER
LA MEME VUE QUE LE USER EN PLUS D AVORI UNE SECTION
MESSAGERIE ET NOTIFICATION , SA SECTION MESSAGERIE DOIT LUI PERMETTRE DE POUVOIR CONTACTER SON COACH UNIQUEMENT OU UN JOUEUR DE LA MEME EQUIPE QUE LUI

POUR LES VUES COACH ET ORAGNIZER
la meme vue que la vue user 
en plus des sections messagerie et notification
Messagerie pour le coach doit lui permettre de juste pouvoir contacter un joeuur specifique, un organisateur specifique ,ou d envoyer un message de diffusion par equipe(ses equipes) , ou par groupe de joueurs(ses joueurs)
Messagerie pour l organizer doit lui permettre de pouvoir envoyer un message aux coachs des equipes inscrites dans sa competition, d envoyer un message à tous les coachs de la plateforme ,  
pour chaque section competition,equipes,joueur ,match , en plus de ce qui est evoqué plus haut
il doit y avoir Gestion de competition ,Gestion d'equipe, Gestion de match ,Gestion de joueur
sauf que selon que ce soit un coach ou un organizer , la page à affficher sera differente
pense y dans la construction de la structure 

public class MessageDTO {
    private Long id;
    private String content;
    private Long senderId;
    private String senderName;
    private String senderRole;
    private List<Long> recipientId;//peut etre un seul ou plusieurs
    private List<String> recipientName;//peut etre un seul ou plusieurs
    private String recipientRole;
    private Long teamId;
    private String teamName;
    private String messageType; // INDIVIDUAL, TEAM, GLOBAL
    private LocalDateTime sentAt;
    private LocalDateTime readAt;
    private boolean isRead;
}
public class NotificationDTO {
    private Long id;
    private String title;
    private String message;
    private String notificationType;
    private Long relatedEntityId;
    private String relatedEntityType; // MATCH, COMPETITION, TEAM, PLAYER, COACH, ORGANIZER
    private Long recipientId;
    private String recipientName;
    private LocalDateTime createdAt;
    private LocalDateTime readAt;
    private boolean isRead;
}
